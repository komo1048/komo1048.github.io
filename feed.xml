<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://komo1048.github.io/</id><title>CoJalDan</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2023-01-26T19:33:24+09:00</updated> <author> <name>코잘단</name> <uri>https://komo1048.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://komo1048.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko-KR" href="https://komo1048.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2023 코잘단 </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>[오늘의 배움] DNS와 DHCP</title><link href="https://komo1048.github.io/posts/DNS-DHCP/" rel="alternate" type="text/html" title="[오늘의 배움] DNS와 DHCP" /><published>2023-01-26T00:00:00+09:00</published> <updated>2023-01-26T00:00:00+09:00</updated> <id>https://komo1048.github.io/posts/DNS-DHCP/</id> <content src="https://komo1048.github.io/posts/DNS-DHCP/" /> <author> <name>코잘단</name> </author> <category term="오늘의배움" /> <category term="네트워크" /> <summary> DNS Domain Name System의 약자로 사람들이 읽기 쉬운 영문/한글 주소를 IP주소로 변환해준다. DNS를 운영하는 서버는 네임서버(Name Server)라고 한다. DHCP Dynamic Host Configuration Protocol의 약자로 호스트의 IP주소 외에도 다양한 네트워크 정보를 클라이언트에게 자동적으로 할당해주는 프로토콜이다. 다수의 컴퓨터에 IP를 자동으로 할당되기 때문에 IP 충돌을 막을 수 있지만 DHCP서버가 다운되면 IP 할당이 이루어지지 않는다 </summary> </entry> <entry><title>[오늘의 배움] Context Switching</title><link href="https://komo1048.github.io/posts/Context-switching/" rel="alternate" type="text/html" title="[오늘의 배움] Context Switching" /><published>2023-01-25T00:00:00+09:00</published> <updated>2023-01-25T00:00:00+09:00</updated> <id>https://komo1048.github.io/posts/Context-switching/</id> <content src="https://komo1048.github.io/posts/Context-switching/" /> <author> <name>코잘단</name> </author> <category term="오늘의배움" /> <category term="운영체제" /> <summary> Context Switching 하나의 프로세스가 CPU를 사용중인 상태에서 다른 프로세스가 CPU를 사용하도록 하기 위해, 먼저 사용하고 있던 프로세스의 PCB정보를 Register에 보관(저장)하고 다른 프로세스를 처리하는 과정을 말한다. 프로세스가 끝나면 Register에 저장한 먼저 사용하고 있던 프로세스의 PCB정보를 읽어 이어서 작업한다. </summary> </entry> <entry><title>[오늘의 배움] TCP의 제어</title><link href="https://komo1048.github.io/posts/TCP/" rel="alternate" type="text/html" title="[오늘의 배움] TCP의 제어" /><published>2023-01-17T00:00:00+09:00</published> <updated>2023-01-17T00:00:00+09:00</updated> <id>https://komo1048.github.io/posts/TCP/</id> <content src="https://komo1048.github.io/posts/TCP/" /> <author> <name>코잘단</name> </author> <category term="오늘의배움" /> <category term="네트워크" /> <summary> TCP의 제어 전송 프로토콜인 TCP에는 대표적인 3가지 제어가 있다. 흐름제어 송신측과 수신측 사이에 데이터 처리 속도 차이를 제어하기 위한 기법 송신측은 수신측의 데이터 처리속도를 파악하고 어느정도의 데이터 양을 보낼지 결정 송신측의 속도가 빠를 경우 발생, 수신측에서 오버플로우를 방지 Stop and Wait / Sliding Window 혼잡제어 송신측의 데이터 전달과 네트워크의 데이터 처리 속도 차이를 해결하기 위한 기법 오버플로우 또는 데이터 손실 방지 송신측에서 보내는 데이터의 전송 속도를 제어 오류제어 오류 검출과 재전송을 담당 Stop and Wait ARQ / Go-Back-n ARQ </summary> </entry> <entry><title>[오늘의 배움] 컴파일러와 인터프리터의 차이</title><link href="https://komo1048.github.io/posts/Compiler-Interpreter/" rel="alternate" type="text/html" title="[오늘의 배움] 컴파일러와 인터프리터의 차이" /><published>2023-01-16T00:00:00+09:00</published> <updated>2023-01-16T00:00:00+09:00</updated> <id>https://komo1048.github.io/posts/Compiler-Interpreter/</id> <content src="https://komo1048.github.io/posts/Compiler-Interpreter/" /> <author> <name>코잘단</name> </author> <category term="오늘의배움" /> <category term="운영체제" /> <summary> 컴파일러 한 번에 파일을 컴퓨터 언어로 번역함 처음 실행에는 오래 걸리지만 번역하고 나면 파일로 만들어져 빠름 전체 코드를 스캔 후 번역하기 때문에 실행 전 오류를 알 수 있음 코드를 수정하면 다시 컴파일 해야함 컴파일러 언어 : C / C++ / JAVA 인터프리터 실행 시 한 번에 한 줄씩 번역함 한 줄씩 실행하기 때문에 컴파일러보다 느림 실행 후 오류를 알 수 있음 인터프리터 언어 : JavaScript / Python / Ruby </summary> </entry> <entry><title>[오늘의 배움] TCP와 UDP</title><link href="https://komo1048.github.io/posts/TCPUDP/" rel="alternate" type="text/html" title="[오늘의 배움] TCP와 UDP" /><published>2023-01-12T00:00:00+09:00</published> <updated>2023-01-12T00:00:00+09:00</updated> <id>https://komo1048.github.io/posts/TCPUDP/</id> <content src="https://komo1048.github.io/posts/TCPUDP/" /> <author> <name>코잘단</name> </author> <category term="오늘의배움" /> <category term="네트워크" /> <summary> TCP(Transmission Control Protocol) 란? 전송계층에 연결지향형 프로토콜로 두 개의 호스트가 데이터를 주고 받을 때 에러 없이, 순서 보장과 신뢰성있는 전달을 해주는 프로토콜이다. UDP(User Datagram Protocol) UDP는 전송계층에 비연결형 프로토콜로 두 개의 호스트가 데이터를 주고 받을 때 순서를 보장하지 않고 일방적으로 데이터를 보내는 프로토콜이다. 그래서 TCP보다는 속도는 빠르지만 신뢰성을 보장하지 않으므로 데이터 손실이 발생할 수 있다는 특징이 있다. </summary> </entry> </feed>
