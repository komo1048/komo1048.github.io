[ { "title": "오늘의 배움 정규표현식", "url": "/posts/regexp/", "categories": "Javascript", "tags": "오늘의배움, Javascript", "date": "2022-06-17 00:00:00 +0900", "snippet": "오늘은 공부해야지 해야지 하다가 계속 미뤘던 정규표현식에 대해서 알아보려고 한다. 😅 정규표현식이란 ?정규표현식 : 문자열에서 특정 문자를 찾기 위한 패턴.보통 회원 가입할 때 아이디, 이메일, 비밀번호 형식 등을 검사할 때 많이 사용한다 !정규표현식은 객체기 때문에 RegExp 생성자 함수를 사용해서 객체를 생성할 수도 있다 !!만약 정규표현식이 없었다면 😱 반복문과 조건문을 통해 하나하나 검사해야 하기 때문에 엄청 힘들 것 같다. 정규표현식 사용법정규표현식은 따옴표는 생략해도 된다 ! 따옴표를 사용하면 따옴표까지도 패턴에 포함해서 검색해버리니 주의 !정규표현식의 표현은 다음과 같다./패턴/플래그 예제로 확인해보자.예제 코드 👇const str = \"Hello World\";// 이 정규표현식은 l을 찾는 표현식이고 플래그 i는 대소문자를 구문하지 않는 것이다 !const reg = /l/i;reg.test(str); //result : true;// 아래와 같이 변수에 넣지 않고 바로 사용도 가능하다./l/i.test(str); // result : true; 정규표현식의 플래그플래그들은 순서 상관없이 /패턴/플래그 에서 플래그 자리에 넣어서 사용하면 된다. 플래그 의미 설명 i Ignore case 대소문자 구별 안함 g Global 받은 문자열 전체를 검색 m Multi line 문자열의 행이 바뀌어도 검색 정규표현식 메서드다음은 정규표현식의 메서드들에 대해서 알아보자. exec 메서드 exec 메서드는 매개변수로 받은 문자열을 정규표현식의 패턴으로 검색하여 결과를 배열로 반환해준다.⭐exec 메서드는 플래그 g를 사용해도 첫 번째 매칭 결과만 반환한다 !예제 코드 👇let str = \"Hello World\";let reg = /ll/;reg.exec(str); // result : ['l', index: 2, input: 'Hello World', groups: undefined] test 메서드 test 메서드는 매개변수로 받은 문자열을 정규표현식의 패턴으로 검색하여 결과를 boolean 값으로 반환해준다.예제 코드 👇let str = \"Hello World\";let reg = /ll/;reg.test(str); // result : true match 메서드 match 메서드는 exec와 비슷한데 플래그 g를 사용하면 모든 매칭결과를 배열로 반환한다는 차이점이 있다.예제 코드 👇let str = \"Hello World\";let reg = /ll/;str.test(reg); // result : ['l', 'l', 'l'] 정규표현식 패턴 사용다음은 정규표현식 패턴을 사용할 때 무엇이 있는지 알아보자. 임의의 문자열 검색 정규표현식의 패턴 중 . 은 임의의 문자 한 개를 의미한다. .을 여러개 쓰면 내용과 상관없이 쓴 갯수만큼 검색한다예제 코드 👇let str = \"Hello World\";let reg = /../g; // 플래그 g를 사용했으므로 전체를 검색str.match(reg); // result : ['He', 'll', 'o ', 'Wo', 'rl'] .을 두 개 썻으니 2개씩 검색된다. 반복 검색 찾고 싶은 패턴 뒤에 {n,m}을 써주면 최소 n번, 최대 m번 반복되는 문자를 검색한다. ,뒤에 띄어쓰기가 안들어가도록 주의 !+는 최소 한번 이상 반복되는 문자열을 검색하는 패턴이다.?는 바로 앞 패턴이 최소 0 번 최대 한번 이상 반복되는 문자열을 검색하는 패턴이다. 즉 있어도 되고 없어도 된다.예제 코드 👇let str = \"Hello World\";let reg = /l{1,2}/g; // l이 최소 1번 최대 2번 반복되는 문자 검색// /l+/g; 이렇게 넣어도 결과는 동일하다.str.match(reg); // result : ['ll', 'l']let reg = /la?/g; // result : ['l', 'l', 'l'] or 검색 이름 그대로 or( ) 검색을 한다 ! /h|e/ig; 이렇게 쓰면 h또는 e를 검색한다. 예제 코드는 건너 뛰겠다. 범위 지정 0~9 그리고 a~z 까지 검색하려고 한다면 정말 힘들 것이다. 하지만 [] 안에 범위를 지정해 간단하게 검색이 가능하다.예제 코드 👇let str = \"Hello World\";let reg = /[a-z]/g; // a~z까지 검색, str.match(reg); // result : ['e', 'l', 'l', 'o', 'o', 'r', 'l', 'd']// 만약 대문자도 검색하고 싶다면 [A-Za-z]로 검색하면 된다.// /[A-Za-z]/g; result :['H', 'e', 'l', 'l', 'o', 'W', 'o', 'r', 'l', 'd']// 숫자도 마찬가지로 [0-9]로 검색하면 된다. 다른 방식으로 검색하기 이번엔 지금까지 검색한 것과 의미는 같지만 사용을 다르게 해서 검색해보는 법을 알아보자. 사용법 설명 \\d 숫자를 의미 === [0-9] \\D 숫자가 아닌 문자를 의미 \\w 알파벳, 숫자, 언더스코어(_)를 의미 \\W 알파벳, 숫자, 언더스코어(_)가 아닌 문자를 의미 ^ [패턴] 안에서는 not을 의미하고 [패턴] 밖에서는 문자의 시작을 의미 $ 문자열의 마지막을 의미 이것으로 정규표현식에 대해 거의 다 알아본 것 같다… (아직 모르는게 많지만 😥)이제 이걸 응용해서 정규표현식을 짜보면 될 것 같다 !!참조 : 모던 자바스크립트 Deep Dive / MDN" }, { "title": "github.io 블로그 시작하기", "url": "/posts/first/", "categories": "Blog", "tags": "Blog", "date": "2022-06-16 00:00:00 +0900", "snippet": "깃허브 블로그 시작 후 첫 포스팅가보자아아아아" } ]
